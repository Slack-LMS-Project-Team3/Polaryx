<context>
# Overview
이 프로젝트는 팀 내 실시간 커뮤니케이션과 협업을 지원하는 웹 기반 메신저 (슬랙 클론)입니다.
문제점: 이메일/기존 채팅툴의 느린 대응, 맥락 부족, 파일/정보 분산
해결책: 채널 기반 실시간 대화, 파일 공유, 알림, 사용자/팀 관리 기능
타깃 사용자: 스타트업, 프로젝트 팀, 소규모 조직 등 신속하고 유연한 커뮤니케이션이 필요한 협업 조직

# Core Features
🔹 채널 기반 대화
- 무엇을 하는가: 사용자들이 특정 주제나 목적에 따라 채널을 생성하고 대화
- 중요성: 논의의 주제를 명확히 구분해 협업 효율을 높임
- 작동 방식: DB에 채널 모델을 두고, 참여자 권한 및 공개/비공개 속성에 따라 접근 제어

🔹 1:1 및 그룹 DM
- 무엇을 하는가: 사용자 간 직접 메시지 또는 그룹 기반 대화 가능
- 중요성: 비공개 논의 및 빠른 커뮤니케이션 필요시 활용
- 작동 방식: DM용 Room을 DB에 구성하고 WebSocket으로 연결 관리

🔹 실시간 메시징
- 무엇을 하는가: 채널/DM 내 메시지를 실시간으로 송수신
- 중요성: 업무 맥락 파악과 신속한 의사결정에 핵심
- 작동 방식: WebSocket 기반 메시지 송수신 및 읽음 처리

🔹 파일 및 이미지 공유
- 무엇을 하는가: 문서/이미지 업로드 및 공유
- 중요성: 외부 협업 도구 사용을 줄이고 중앙화된 자료 공유 가능
- 작동 방식: AWS S3 혹은 로컬 파일 시스템에 업로드, DB에 메타정보 저장

🔹 알림 시스템
- 무엇을 하는가: 멘션, DM, 초대 등 이벤트 발생 시 사용자에게 알림 전송
- 중요성: 중요한 메시지를 놓치지 않도록 유도
- 작동 방식: WebSocket 이벤트 또는 서버 알림 푸시

🔹 검색 기능
- 무엇을 하는가: 메시지, 사용자, 파일 검색
- 중요성: 커뮤니케이션 히스토리 탐색 및 맥락 재파악
- 작동 방식: PostgreSQL Full Text Search 또는 Elasticsearch 연동

🔹 사용자/팀 관리
- 무엇을 하는가: 회원가입, 로그인, 프로필, 팀 생성/초대 기능
- 중요성: 협업 단위의 구성 및 개별 사용자 인증
- 작동 방식: JWT 기반 인증과 팀-사용자 테이블 매핑, 역할 기반 접근 제어(Role Based Acess Control, RBAC)

# User Experience
👤 사용자 페르소나
- 일반 팀원: 채널 참여, 메시지 송수신, 파일 공유
- 관리자: 팀 생성, 구성원 초대, 채널 관리

🔁 핵심 사용자 흐름
회원가입 → 로그인
팀 생성 또는 초대 수락
채널 생성 또는 참여
메시지 송수신 + 파일 공유 + 알림 수신

🎨 UI/UX 고려사항
사이드바 기반 채널/DM 구조
반응형 레이아웃 (PC/모바일 대응)
실시간 표시 (읽음 여부, 접속 상태 등)
메시지 표시 최적화 (채널/DM 내 메시지 분리)
알림 뱃지 및 멘션 강조

<PRD>
# Technical Architecture
## 시스템 구성 요소
Frontend: React (Next.js), TypeScript, WebSocket 클라이언트
Backend: FastAPI, Python, WebSocket 서버
Database: MongoDB, MySQL
File Storage: AWS S3
Authentication: JWT 기반 인증, OAuth2(구글 등) 확장
Deployment & Infra: Docker, AWS (EC2, S3), GitHub Actions for CI/CD
APIs: RESTful API (회원가입/채널/파일 등) + WebSocket 이벤트 메시지 핸들링

## 데이터 구조
1. Users
 - id
 - name
 - email
 - workspace_id
 - provider
 - provider_id
 - created_at
 - updated_at
 - deleted_at

2. RefreshTokens
 - id
 - user_id
 - token
 - created_at
 - updated_at

3. Workspaces
 - id
 - name
 - created_at
 - updated_at
 - deleted_at

4. WorkspaceMembers (NoSQL - 사용자가 자유롭게 구성)
 - id
 - user_id
 - workspace_id
 - group_id
 - nickname
 - email
 - github
 - blog
 - image
 - created_at
 - updated_at
 - deleted_at

5. Groups
 - id
 - name
 - description

6. Roles
 - id
 - name
 - group_id
 - permissions (JSONB)

7. UserGroupMembership
 - id
 - user_id
 - group_id
 - role_id

8. Sections
 - id 
 - name
 - type (Announe | Course | Channel | DM | Admin)
 - is_private

9. Tabs
 - id
 - workspace_id
 - section_id
 - name
 - created_at
 - updated_at
 - deleted_at

10. TabMemebers
 - id
 - tab_id
 - user_id

11. Messages
 - id
 - channel_id
 - sender_id
 - content
 - created_at
 - updated_at
 - deleted_at

12. SubMessages
 - id
 - message_id
 - sender_id
 - content
 - created_at
 - updated_at
 - deleted_at


# Development Roadmap
✅ MVP (최소 기능 제품)
사용자 인증: 소셜로그인
회원 등록: 단일 워크스페이스, 인원/그룹 초대
채널: 채널 생성, 초대/퇴장
메시지: 유저 메시지 (사진, 작성자, 시간, 텍스트 서식 지정) | 시스템 메시지 (채널 생성, 유저 입/퇴장 등)
알림: 브라우저 비 활성화 시에도 신규 메시지 알림 (Web Push API)
프로필: 프로필 조회, 수정
그룹 관리: 그룹 추가, 권한 관리
학습 자료: 작성 및 관리

🧩 Future Enhancements
메시지, 채널 내 파일 업로드
메시지 및 파일 검색 기능
메시지 수정/삭제 기능
이모지 리액션
모바일 앱 클라이언트
외부 서비스 연동 (Google Calendar, GitHub 등)
메시지 핀/북마크
파일 임포트를 통한 회원 등록
모바일 대응
멤버 맨션
메시지 검색, 인원/그룹 검색
접속 상태 표시
워크 스테이스 추가 (e.g. 게임랩, 게임 테크랩)

# Logical Dependency Chain
1. 기반 기능
- 회원가입/로그인 → 팀/채널 생성 → 채널 참여
2. 가시적 인터랙션 기능
- 실시간 메시징 → 파일 업로드/다운로드 → 기본 알림
3. 강화 기능 (MVP 이후)
- 메시지 검색
- 알림 최적화
- 외부 연동 기능
⚙️ 각 기능은 가능한 작은 단위(atomic)로 분리해 기능 단위로 배포/테스트 가능하도록 설계

# Risks and Mitigations
위험 요소 | 설명 | 대응 방안
--------------------------------
실시간 메시징 안정성 | WebSocket 연결 불안정 시 메시지 유실 위험 | 연결 유지 로직, 재전송 큐, 로그 기록
파일 저장 및 보안 | 사용자 파일 접근 제한 필요 | S3 Presigned URL 사용, 권한 체크 로직
인증 보안 | JWT 탈취/위조 위험 | 짧은 만료시간 + refresh 토큰 전략 도입
MVP 범위 관리 | 너무 많은 기능이 한 번에 요구될 수 있음 | 핵심 기능 우선 개발, 부가기능은 Phase 2 이후로 이동
확장성 문제 | 사용자 증가 시 서버, DB 병목 가능성 | 수평 확장 고려, 캐싱 및 비동기 처리 적용

# Appendix
🔗 참고자료
Slack 공식 API 및 UX 설계 문서
Rocket.Chat, Mattermost 오픈소스 구조 분석
WebSocket vs REST 비교 자료
PostgreSQL FTS, Socket.IO reconnect 전략

🧱 기술 사양
WebSocket 프로토콜 및 reconnect handling
JWT 인증 흐름 및 Refresh Token 전략
</PRD>